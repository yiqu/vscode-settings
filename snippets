{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Export Function (CamelCase from filename)": {
    "prefix": "ef",
    "body": [
      "export function ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}() {",
      "  $0",
      "}"
    ],
    "description": "Creates export default function using CamelCase from filename"
  },

	"Create Function (editable name)": {
    "prefix": "fn",
    "body": [
      "function ${1:functionName}() {",
      "  $0",
      "}"
    ],
    "description": "Creates a function with the name selected for quick rename"
  },

	"Arrow Function": {
    "prefix": "af",
    "body": [
      "const ${1:functionName} = (${2:params}) => {",
      "  $0",
      "};"
    ],
    "description": "Create an arrow function with editable name and params"
  }
}





{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Use Client Directive": {
    "prefix": "uc",
    "body": [
      "\"use client\";"
    ],
    "description": "Insert Next.js use client directive"
  },

	"Use Server Directive": {
    "prefix": "us",
    "body": [
      "\"use server\";"
    ],
    "description": "Insert Next.js use server directive"
  },

	"Export Default Function (PascalCase from filename)": {
		"prefix": "edf",
		"body": [
      "export default function ${TM_FILENAME_BASE/(^\\w|[-_ ]\\w)/${1:/upcase}/g}() {",
      "  return (",
      "    <div>$0</div>",
      "  );",
      "}"
    ],
		"description": "Creates export default function using PascalCase version of filename"
	},

  "Export Function (CamelCase from filename)": {
    "prefix": "ef",
    "body": [
      "export function ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}() {",
      "  $0",
      "}"
    ],
    "description": "Creates export default function using CamelCase from filename"
  },

	"Create Function (editable name)": {
    "prefix": "fn",
    "body": [
      "function ${1:functionName}() {",
      "  $0",
      "}"
    ],
    "description": "Creates a function with the name selected for quick rename"
  },

	"Arrow Function": {
    "prefix": "af",
    "body": [
      "const ${1:functionName} = (${2:params}) => {",
      "  $0",
      "};"
    ],
    "description": "Create an arrow function with editable name and params"
  }
}
